diff --git a/models/career.rb b/models/career.rb
index bcd0bf6..c4d26d4 100644
--- a/models/career.rb
+++ b/models/career.rb
@@ -1,11 +1,13 @@
-class Career < Sequel::Model
-	one_to_many :outcomes
-	one_to_many :surveys
-    one_to_many :finished_surveys
+# frozen_string_literal: true
 
-	plugin :validation_helpers
-    def validate
-        super
-            validates_presence [:name]
-    end
-end
\ No newline at end of file
+class Career < Sequel::Model # rubocop:todo Style/Documentation
+  one_to_many :outcomes
+  one_to_many :surveys
+  one_to_many :finished_surveys
+
+  plugin :validation_helpers
+  def validate
+      super # rubocop:todo Layout/IndentationWidth
+          validates_presence [:name] # rubocop:todo Layout/IndentationConsistency
+  end
+end
diff --git a/models/choice.rb b/models/choice.rb
index e817965..d489f22 100644
--- a/models/choice.rb
+++ b/models/choice.rb
@@ -1,12 +1,13 @@
-class Choice < Sequel::Model
-	many_to_one :question
-	one_to_many :responses
-	one_to_many :outcomes	
+# frozen_string_literal: true
 
-	plugin :validation_helpers 
-	def validate
-		super 
-			validates_presence [:text, :question_id]
-	end
+class Choice < Sequel::Model # rubocop:todo Style/Documentation
+  many_to_one :question
+  one_to_many :responses
+  one_to_many :outcomes
 
-end
\ No newline at end of file
+  plugin :validation_helpers
+  def validate
+    super
+    validates_presence %i[text question_id]
+  end
+end
diff --git a/models/finished_survey.rb b/models/finished_survey.rb
index e9ca13f..961d974 100644
--- a/models/finished_survey.rb
+++ b/models/finished_survey.rb
@@ -1,9 +1,11 @@
-class Finished_Survey < Sequel::Model
-	many_to_one :career
-	
-	plugin :validation_helpers
-	def validate
-		super 
-			validates_presence [:career_id]
-	end
-end
\ No newline at end of file
+# frozen_string_literal: true
+
+class Finished_Survey < Sequel::Model # rubocop:todo Naming/ClassAndModuleCamelCase, Style/Documentation
+  many_to_one :career
+
+  plugin :validation_helpers
+  def validate
+    super
+    validates_presence [:career_id]
+  end
+end
diff --git a/models/init.rb b/models/init.rb
index 9b7e1ea..9f6bb06 100644
--- a/models/init.rb
+++ b/models/init.rb
@@ -1,3 +1,5 @@
+# frozen_string_literal: true
+
 require_relative 'post'
 require_relative 'question'
 require_relative 'career'
diff --git a/models/outcome.rb b/models/outcome.rb
index 60215c6..9a3459e 100644
--- a/models/outcome.rb
+++ b/models/outcome.rb
@@ -1,10 +1,12 @@
-class Outcome < Sequel::Model
-	many_to_one :career
-	many_to_one :choice
+# frozen_string_literal: true
 
-	plugin :validation_helpers
-	def validate
-		super 	
-			validates_presence [:career_id,:choice_id]
-	end
-end
\ No newline at end of file
+class Outcome < Sequel::Model # rubocop:todo Style/Documentation
+  many_to_one :career
+  many_to_one :choice
+
+  plugin :validation_helpers
+  def validate
+    super
+    validates_presence %i[career_id choice_id]
+  end
+end
diff --git a/models/post.rb b/models/post.rb
index 66ed5b5..189d89e 100644
--- a/models/post.rb
+++ b/models/post.rb
@@ -1,2 +1,4 @@
+# frozen_string_literal: true
+
 class Post < Sequel::Model
 end
diff --git a/models/question.rb b/models/question.rb
index 0df0fed..4f9bec1 100644
--- a/models/question.rb
+++ b/models/question.rb
@@ -1,10 +1,12 @@
-class Question < Sequel::Model
-	one_to_many :responses
-	one_to_many :choices
+# frozen_string_literal: true
 
-	plugin :validation_helpers
-	def validate
-		super	
-		validates_presence [:name, :description, :number, :type]
-	end
-end
\ No newline at end of file
+class Question < Sequel::Model # rubocop:todo Style/Documentation
+  one_to_many :responses
+  one_to_many :choices
+
+  plugin :validation_helpers
+  def validate
+    super
+    validates_presence %i[name description number type]
+  end
+end
diff --git a/models/response.rb b/models/response.rb
index e7cf8ef..5220143 100644
--- a/models/response.rb
+++ b/models/response.rb
@@ -1,11 +1,13 @@
-class Response < Sequel::Model
-    many_to_one :question
-    many_to_one :survey
-    many_to_one :choice
+# frozen_string_literal: true
 
-    plugin :validation_helpers
-    def validate
-        super
-            validates_presence [:question_id, :survey_id, :choice_id]
-    end
+class Response < Sequel::Model # rubocop:todo Style/Documentation
+  many_to_one :question
+  many_to_one :survey
+  many_to_one :choice
+
+  plugin :validation_helpers
+  def validate
+      super # rubocop:todo Layout/IndentationWidth
+      validates_presence %i[question_id survey_id choice_id]
+  end
 end
diff --git a/models/survey.rb b/models/survey.rb
index 2543b43..c41986d 100644
--- a/models/survey.rb
+++ b/models/survey.rb
@@ -1,34 +1,38 @@
-class Survey < Sequel::Model
-    many_to_one :career
-    one_to_many :responses
-
-    plugin :validation_helpers
-    def validate
-    	super
-         validates_presence [:username]
-  	end
-
-    
-    def career_obtained (survey)
-
-        careersPoints = []
-
-        for career in Career.all 
-          careersPoints.push({"career" => career.id, "points" => 0})
-        end
-
-        choicesUser = survey.responses.map{ |elem| elem.choice_id }
-
-        #Filtra las choices de Outcome, tal que estas choices son de las responses del user
-        choices = Outcome.all.filter{ |elem| choicesUser.include? elem.choice_id}
-
-        for c in choices
-            idx = careersPoints.index{ |elem| elem["career"] == c.career_id}
-            if(idx)
-                careersPoints[idx]["points"] += 1
-            end
-        end
-
-        careerWithMaxPoints = careersPoints.max_by{ |elem| elem["points"]}
-    end
-end
\ No newline at end of file
+# frozen_string_literal: true
+
+class Survey < Sequel::Model # rubocop:todo Style/Documentation
+  many_to_one :career
+  one_to_many :responses
+
+  plugin :validation_helpers
+  def validate
+      super # rubocop:todo Layout/IndentationWidth
+      validates_presence [:username]
+  end
+
+  def career_obtained(survey) # rubocop:todo Metrics/AbcSize, Metrics/MethodLength
+      careersPoints = [] # rubocop:todo Layout/IndentationWidth, Naming/VariableName
+
+      Career.all.each do |career|
+        careersPoints.push({ 'career' => career.id, 'points' => 0 }) # rubocop:todo Naming/VariableName
+      end
+
+      choicesUser = survey.responses.map(&:choice_id) # rubocop:todo Naming/VariableName
+
+      # Filtra las choices de Outcome, tal que estas choices son de las responses del user
+      choices = Outcome.all.filter{ |elem| choicesUser.include? elem.choice_id} # rubocop:todo Naming/VariableName
+
+      choices.each do |c|
+          # rubocop:todo Naming/VariableName
+          idx = careersPoints.index{ |elem| elem['career'] == c.career_id} # rubocop:todo Layout/IndentationWidth, Naming/VariableName
+          # rubocop:enable Naming/VariableName
+          if idx
+              careersPoints[idx]['points'] += 1 # rubocop:todo Layout/IndentationWidth, Naming/VariableName
+          end
+      end
+
+      # rubocop:todo Naming/VariableName
+      careerWithMaxPoints = careersPoints.max_by{ |elem| elem['points']} # rubocop:todo Lint/UselessAssignment, Naming/VariableName
+    # rubocop:enable Naming/VariableName
+  end
+end
