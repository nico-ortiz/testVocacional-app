diff --git a/tests/models/careers_test.rb b/tests/models/careers_test.rb
index 5add8ca..e56b38f 100644
--- a/tests/models/careers_test.rb
+++ b/tests/models/careers_test.rb
@@ -1,36 +1,31 @@
- require File.expand_path '../../test_helper.rb', __FILE__
+# frozen_string_literal: true
 
-class CareerTest < MiniTest::Unit::TestCase
-  MiniTest::Unit::TestCase
+require File.expand_path '../test_helper.rb', __dir__
 
-  def test_career_has_many_surveys
+class CareerTest < MiniTest::Unit::TestCase # rubocop:todo Style/Documentation
+  MiniTest::Unit::TestCase # rubocop:todo Lint/Void
 
-  	#Arrange
-  	career = Career.create(name: 'Spaceman')
-  	
-    
-    #Act
-    Survey.create(username: 'Nico Ortiz', career_id: career.id)
-    Survey.create(username: 'Joaco Moran', career_id: career.id)
-    Survey.create(username: 'Agus Giungi', career_id: career.id)
-    #Assert
-    assert_equal(career.surveys.count,3)
+  def test_career_has_many_surveys
+    # Arrange
+    career = Career.create(name: 'Spaceman')
+
+    # Act
+    Survey.create(username: 'Nico Ortiz', career_id: career.id) # rubocop:todo Layout/IndentationConsistency
+    Survey.create(username: 'Joaco Moran', career_id: career.id) # rubocop:todo Layout/IndentationConsistency
+    Survey.create(username: 'Agus Giungi', career_id: career.id) # rubocop:todo Layout/IndentationConsistency
+    # Assert
+    assert_equal(career.surveys.count, 3) # rubocop:todo Layout/IndentationConsistency
   end
 
   def test_career_has_many_outcomes
-    
-    #Arrange
-  	career = Career.create(name: 'Dentist')
+    # Arrange
+    career = Career.create(name: 'Dentist')
 
-    #Act
-    Outcome.create(career_id: career.id, choice_id: 1);
-    Outcome.create(career_id: career.id, choice_id: 2);
+    # Act
+    Outcome.create(career_id: career.id, choice_id: 1)
+    Outcome.create(career_id: career.id, choice_id: 2) # rubocop:todo Layout/IndentationConsistency
 
-    #Assert
+    # Assert
     assert_equal(career.outcomes.count, 2)
   end
-
-    
-
-    
-end
\ No newline at end of file
+end
diff --git a/tests/models/choices_test.rb b/tests/models/choices_test.rb
index 81ff9fc..2699016 100644
--- a/tests/models/choices_test.rb
+++ b/tests/models/choices_test.rb
@@ -1,60 +1,56 @@
-require File.expand_path '../../test_helper.rb', __FILE__
+# frozen_string_literal: true
 
-class ChoiceTest < MiniTest::Unit::TestCase
-  MiniTest::Unit::TestCase
+require File.expand_path '../test_helper.rb', __dir__
+
+class ChoiceTest < MiniTest::Unit::TestCase # rubocop:todo Style/Documentation
+  MiniTest::Unit::TestCase # rubocop:todo Lint/Void
 
   def test_choice_must_has_text
-  	#Arrenge
-  	choice = Choice.new
+    # Arrenge
+    choice = Choice.new
 
-  	#Act
-  	choice.text = nil
+    # Act
+    choice.text = nil
 
-  	#Assert
-  	assert_equal(choice.valid?,false)
+    # Assert
+    assert_equal(choice.valid?, false)
   end
 
-   def test_choice_must_has_question_id
-  	#Arrenge
-  	choice = Choice.new
+  def test_choice_must_has_question_id
+    # Arrenge
+    choice = Choice.new
 
-  	#Act
-  	choice.question_id = ''
+    # Act
+    choice.question_id = ''
 
-  	#Assert
-  	assert_equal(choice.valid?,false)
+    # Assert
+    assert_equal(choice.valid?, false)
   end
 
   def test_choice_must_has_same_question_id
-  	#Arrange
-  	question = Question.create(description: '¿Te hace daño la pantalla de la pc?', type: 'MC', number: 2, name: 'Salud')
-  	choice1 = Choice.create(text: 'Si', question_id: question.id)
-  	choice2 = Choice.create(text: 'De vez en cuando', question_id: question.id)
-  	choice3 = Choice.create(text: 'No', question_id: question.id)
-
-  	#Assert
-  	assert_equal(choice1.question.id == choice2.question.id, choice2.question.id == choice3.question.id)
+    # Arrange
+    question = Question.create(description: '¿Te hace daño la pantalla de la pc?', type: 'MC', number: 2, name: 'Salud')
+    choice1 = Choice.create(text: 'Si', question_id: question.id)
+    choice2 = Choice.create(text: 'De vez en cuando', question_id: question.id)
+    choice3 = Choice.create(text: 'No', question_id: question.id)
+
+    # Assert
+    assert_equal(choice1.question.id == choice2.question.id, choice2.question.id == choice3.question.id)
   end
 
-  def test_choice_has_many_response
-  	#Arrange
-  	survey = Survey.create(username: 'Federico')
+  def test_choice_has_many_response # rubocop:todo Metrics/AbcSize
+    # Arrange
+    survey = Survey.create(username: 'Federico')
 
-  	question = Question.create(description: '¿Arrancaste alguna carrera y dejaste?', type: 'MC', number: 7, name: 'General')
+    question = Question.create(description: '¿Arrancaste alguna carrera y dejaste?', type: 'MC', number: 7, name: 'General')
 
-  	choice = Choice.create(text: 'Nunca', question_id: question.id)
+    choice = Choice.create(text: 'Nunca', question_id: question.id)
 
-  	resp1 = Response.create(choice_id: choice.id, question_id: question.id, survey_id: survey.id)
-  	resp2 = Response.create(choice_id: choice.id, question_id: question.id, survey_id: survey.id)
-  	resp3 = Response.create(choice_id: choice.id, question_id: question.id, survey_id: survey.id)
+    resp1 = Response.create(choice_id: choice.id, question_id: question.id, survey_id: survey.id) # rubocop:todo Lint/UselessAssignment
+    resp2 = Response.create(choice_id: choice.id, question_id: question.id, survey_id: survey.id) # rubocop:todo Lint/UselessAssignment
+    resp3 = Response.create(choice_id: choice.id, question_id: question.id, survey_id: survey.id) # rubocop:todo Lint/UselessAssignment
 
-  	#Assert
-  	assert_equal(choice.responses.count,3)
+    # Assert
+    assert_equal(choice.responses.count, 3)
   end
-
-
-
-
-
-
 end
diff --git a/tests/models/finished_surveys_test.rb b/tests/models/finished_surveys_test.rb
index 2a0010a..19a421b 100644
--- a/tests/models/finished_surveys_test.rb
+++ b/tests/models/finished_surveys_test.rb
@@ -1,23 +1,25 @@
-require File.expand_path '../../test_helper.rb', __FILE__
+# frozen_string_literal: true
 
-class FinishedSurveyTest < MiniTest::Unit::TestCase
-    MiniTest::Unit::TestCase
+require File.expand_path '../test_helper.rb', __dir__
 
-    def test_finished_survey_has_a_career
-        #Arrange
-        career = Career.create(name: 'Tester')
-        #Act
-        finished_survey = Finished_Survey.create(career_id: career.id)
-        #Assert
-        assert_equal(finished_survey.career_id, career.id)
-    end
+class FinishedSurveyTest < MiniTest::Unit::TestCase # rubocop:todo Style/Documentation
+  MiniTest::Unit::TestCase # rubocop:todo Lint/Void
 
-    def test_finished_survey_has_career
-        #Arrange
-        finished_survey = Finished_Survey.new
-        #Act
-        finished_survey.career_id = nil
-        #Assert
-        assert_equal(finished_survey.valid?, false)
-    end
-end
\ No newline at end of file
+  def test_finished_survey_has_a_career
+      # Arrange
+      career = Career.create(name: 'Tester') # rubocop:todo Layout/IndentationWidth
+      # Act
+      finished_survey = Finished_Survey.create(career_id: career.id)
+      # Assert
+      assert_equal(finished_survey.career_id, career.id)
+  end
+
+  def test_finished_survey_has_career
+      # Arrange
+      finished_survey = Finished_Survey.new # rubocop:todo Layout/IndentationWidth
+      # Act
+      finished_survey.career_id = nil
+      # Assert
+      assert_equal(finished_survey.valid?, false)
+  end
+end
diff --git a/tests/models/outcomes_test.rb b/tests/models/outcomes_test.rb
index 08cd2e3..1227426 100644
--- a/tests/models/outcomes_test.rb
+++ b/tests/models/outcomes_test.rb
@@ -1,40 +1,40 @@
-require File.expand_path '../../test_helper.rb', __FILE__
+# frozen_string_literal: true
 
-class OutcomeTest < MiniTest::Unit::TestCase
-  MiniTest::Unit::TestCase
+require File.expand_path '../test_helper.rb', __dir__
+
+class OutcomeTest < MiniTest::Unit::TestCase # rubocop:todo Style/Documentation
+  MiniTest::Unit::TestCase # rubocop:todo Lint/Void
 
   def test_outcome_has_a_career_id
-  	#Arrange
-  	outcome = Outcome.new
+    # Arrange
+    outcome = Outcome.new
 
-  	#Act
-  	outcome.career_id = nil
+    # Act
+    outcome.career_id = nil
 
-  	#Assert
-  	assert_equal(outcome.valid?,false)	
+    # Assert
+    assert_equal(outcome.valid?, false)
   end
 
   def test_outcome_has_a_choice_id
-    #Arrange
+    # Arrange
     outcome = Outcome.new
 
-    #Act
+    # Act
     outcome.choice_id = nil
 
-    #Assert
-    assert_equal(outcome.valid?,false)  
+    # Assert
+    assert_equal(outcome.valid?, false)
   end
 
   def test_outcome_must_has_same_choice_id
-    #Arrange
+    # Arrange
     choice = Choice.create(text: 'Hola que tal')
     career = Career.create(name: 'Agronomia')
     out1 = Outcome.create(choice_id: choice.id, career_id: career.id)
     out2 = Outcome.create(choice_id: choice.id, career_id: career.id)
-    
-    #Assert
+
+    # Assert
     assert_equal(out2.choice.id == out1.choice.id, true)
   end
-
-
 end
diff --git a/tests/models/questions_test.rb b/tests/models/questions_test.rb
index 959a4f4..693d4a5 100644
--- a/tests/models/questions_test.rb
+++ b/tests/models/questions_test.rb
@@ -1,87 +1,89 @@
-require File.expand_path '../../test_helper.rb', __FILE__
-
-class QuestionTest < MiniTest::Unit::TestCase
-  MiniTest::Unit::TestCase
-
-    def test_question_must_has_name
-        #Arrange  
-        question = Question.new 
-        
-        #Act
-        question.name = nil
-        
-        #Assert
-        assert_equal(question.valid?, false)
-    end
-
-    def test_question_must_has_number
-        #Arrange
-        question = Question.new(name:'Aptitudes', number: nil)
-        
-        #Act
-        
-        #Assert
-        assert_equal(question.valid?, false)
-    end
-
-    def test_question_must_has_description
-        #Arrange
-        question = Question.new(name:'Matematicas', number: 10, description: nil)
-        
-        #Act
-        
-        #Assert
-        assert_equal(question.valid?, false)
-    end
-
-    def test_question_must_has_type
-        #Arrange
-        question = Question.new(name:'Gustos', number: 6, description: '¿Te gusta el helado?', type: nil)
-        
-        #Act
-        
-        #Assert
-        assert_equal(question.valid?, false)
-    end
-
-    def test_question_must_has_atributes_valid
-        #Arrange
-        question = Question.new(name: 'Deportes', number: 1, description: '¿Realiza deportes?', type: 'Multiple opcion')
-        
-        #Act
-        
-        #Assert
-        assert_equal(question.valid?, true)
-    end
-
-    def test_has_many_responses
-        #Arrange
-        question = Question.create(name: 'Series', number: 34, description: 'The Office o Friends', type: 'Una opcion')
-        
-        #Act
-        choice1 = Choice.create(text: 'The Office', question_id: question.id)
-        choice2 = Choice.create(text: 'Friends', question_id: question.id)
-        survey1 = Survey.create(username: 'Carlitos Tevez')
-        survey2 = Survey.create(username: 'Ronaldo Nazario')
-        Response.create(question_id: question.id, choice_id: choice1.id, survey_id: survey1.id)
-        Response.create(question_id: question.id, choice_id: choice1.id, survey_id: survey2.id)
-        choice = Choice.find(text: 'The Office')
-
-        #Assert
-        assert_equal(choice.responses.count, 2)
-    end
-
-    def test_has_many_choices
-        #Arrange
-        question = Question.create(name: 'Maths', number: 123, description: '2+2?', type: 'Multiple choice')
-                
-        #Act
-        Choice.create(text: '2', question_id: question.id)
-        Choice.create(text: '4', question_id: question.id)
-        Choice.create(text: '6', question_id: question.id)
-        Choice.create(text: '10', question_id: question.id)
-
-        #Assert
-        assert_equal(question.choices.count, 4)
-    end
-end
\ No newline at end of file
+# frozen_string_literal: true
+
+require File.expand_path '../test_helper.rb', __dir__
+
+class QuestionTest < MiniTest::Unit::TestCase # rubocop:todo Style/Documentation
+  MiniTest::Unit::TestCase # rubocop:todo Lint/Void
+
+  def test_question_must_has_name
+      # Arrange
+      question = Question.new # rubocop:todo Layout/IndentationWidth
+
+      # Act
+      question.name = nil
+
+      # Assert
+      assert_equal(question.valid?, false)
+  end
+
+  def test_question_must_has_number
+      # Arrange
+      question = Question.new(name: 'Aptitudes', number: nil) # rubocop:todo Layout/IndentationWidth
+
+      # Act
+
+      # Assert
+      assert_equal(question.valid?, false)
+  end
+
+  def test_question_must_has_description
+      # Arrange
+      question = Question.new(name: 'Matematicas', number: 10, description: nil) # rubocop:todo Layout/IndentationWidth
+
+      # Act
+
+      # Assert
+      assert_equal(question.valid?, false)
+  end
+
+  def test_question_must_has_type
+      # Arrange
+      question = Question.new(name: 'Gustos', number: 6, description: '¿Te gusta el helado?', type: nil) # rubocop:todo Layout/IndentationWidth
+
+      # Act
+
+      # Assert
+      assert_equal(question.valid?, false)
+  end
+
+  def test_question_must_has_atributes_valid
+      # Arrange
+      question = Question.new(name: 'Deportes', number: 1, description: '¿Realiza deportes?', type: 'Multiple opcion') # rubocop:todo Layout/IndentationWidth
+
+      # Act
+
+      # Assert
+      assert_equal(question.valid?, true)
+  end
+
+  def test_has_many_responses # rubocop:todo Metrics/AbcSize
+      # Arrange
+      question = Question.create(name: 'Series', number: 34, description: 'The Office o Friends', type: 'Una opcion') # rubocop:todo Layout/IndentationWidth
+
+      # Act
+      choice1 = Choice.create(text: 'The Office', question_id: question.id)
+      choice2 = Choice.create(text: 'Friends', question_id: question.id) # rubocop:todo Lint/UselessAssignment
+      survey1 = Survey.create(username: 'Carlitos Tevez')
+      survey2 = Survey.create(username: 'Ronaldo Nazario')
+      Response.create(question_id: question.id, choice_id: choice1.id, survey_id: survey1.id)
+      Response.create(question_id: question.id, choice_id: choice1.id, survey_id: survey2.id)
+      choice = Choice.find(text: 'The Office')
+
+      # Assert
+      assert_equal(choice.responses.count, 2)
+  end
+
+  def test_has_many_choices
+      # Arrange
+      question = Question.create(name: 'Maths', number: 123, description: '2+2?', type: 'Multiple choice') # rubocop:todo Layout/IndentationWidth
+
+      # Act
+      Choice.create(text: '2', question_id: question.id)
+      Choice.create(text: '4', question_id: question.id)
+      Choice.create(text: '6', question_id: question.id)
+      Choice.create(text: '10', question_id: question.id)
+
+      # Assert
+      assert_equal(question.choices.count, 4)
+  end
+end
diff --git a/tests/models/responses_test.rb b/tests/models/responses_test.rb
index 066a89f..1cfbf07 100644
--- a/tests/models/responses_test.rb
+++ b/tests/models/responses_test.rb
@@ -1,60 +1,61 @@
-require File.expand_path '../../test_helper.rb', __FILE__
+# frozen_string_literal: true
 
-class SurveyTest < MiniTest::Unit::TestCase
-  MiniTest::Unit::TestCase
+require File.expand_path '../test_helper.rb', __dir__
 
-    def test_response_has_question
-        #Arrange
-        response = Response.new
+class SurveyTest < MiniTest::Unit::TestCase # rubocop:todo Style/Documentation
+  MiniTest::Unit::TestCase # rubocop:todo Lint/Void
 
-        #Act
-        response.question_id = nil
+  def test_response_has_question
+      # Arrange
+      response = Response.new # rubocop:todo Layout/IndentationWidth
 
-        #Assert
-        assert_equal(response.valid?,false)
-    end
+      # Act
+      response.question_id = nil
 
-    def test_response_has_survey
-        #Arrange
-        response = Response.new(question_id: 1)
+      # Assert
+      assert_equal(response.valid?, false)
+  end
 
-        #Act
-        response.survey_id = nil
+  def test_response_has_survey
+      # Arrange
+      response = Response.new(question_id: 1) # rubocop:todo Layout/IndentationWidth
 
-        #Assert
-        assert_equal(response.valid?, false)
-    end
+      # Act
+      response.survey_id = nil
 
-    def test_response_has_choice
-        #Arrange
-        response = Response.new(question_id: 1, survey_id: 1)
+      # Assert
+      assert_equal(response.valid?, false)
+  end
 
-        #Act
-        response.choice_id = ''
+  def test_response_has_choice
+      # Arrange
+      response = Response.new(question_id: 1, survey_id: 1) # rubocop:todo Layout/IndentationWidth
 
-        #Assert
-        assert_equal(response.valid?, false)
-    end
+      # Act
+      response.choice_id = ''
 
-    def test_response_has_choice_survey_and_question
-        #Arrange
-        question = Question.create(name: 'Maths', number: 1200, description: '2*4', type: 'One choice')
+      # Assert
+      assert_equal(response.valid?, false)
+  end
 
-        #Act
-        choice1 = Choice.create(text: '2', question_id: question.id)
-        choice2 = Choice.create(text: '8', question_id: question.id)
-        choice3 = Choice.create(text: '6', question_id: question.id)
+  def test_response_has_choice_survey_and_question # rubocop:todo Metrics/AbcSize
+      # Arrange
+      question = Question.create(name: 'Maths', number: 1200, description: '2*4', type: 'One choice') # rubocop:todo Layout/IndentationWidth
 
-        survey = Survey.create(username: 'Dwight Schrute')
+      # Act
+      choice1 = Choice.create(text: '2', question_id: question.id) # rubocop:todo Lint/UselessAssignment
+      choice2 = Choice.create(text: '8', question_id: question.id)
+      choice3 = Choice.create(text: '6', question_id: question.id) # rubocop:todo Lint/UselessAssignment
 
-        Response.create(question_id: question.id, choice_id: choice2.id, survey_id: survey.id)
+      survey = Survey.create(username: 'Dwight Schrute')
 
-        choice = Choice.find(text: '8')
-        survey = Survey.find(username: 'Dwight Schrute')
-        response = Response.find(survey_id: survey.id)
-        
-        #Assert
-        assert_equal(choice.id == response.choice_id, true)
-    end
+      Response.create(question_id: question.id, choice_id: choice2.id, survey_id: survey.id)
 
-end
\ No newline at end of file
+      choice = Choice.find(text: '8')
+      survey = Survey.find(username: 'Dwight Schrute')
+      response = Response.find(survey_id: survey.id)
+
+      # Assert
+      assert_equal(choice.id == response.choice_id, true)
+  end
+end
diff --git a/tests/models/surveys_test.rb b/tests/models/surveys_test.rb
index 5f0b97b..5145337 100644
--- a/tests/models/surveys_test.rb
+++ b/tests/models/surveys_test.rb
@@ -1,7 +1,9 @@
-require File.expand_path '../../test_helper.rb', __FILE__
+# frozen_string_literal: true
 
-class SurveyTest < MiniTest::Unit::TestCase
-  MiniTest::Unit::TestCase
+require File.expand_path '../test_helper.rb', __dir__
+
+class SurveyTest < MiniTest::Unit::TestCase # rubocop:todo Style/Documentation
+  MiniTest::Unit::TestCase # rubocop:todo Lint/Void
 
   def test_survey_must_has_username
     # Arrange
@@ -9,29 +11,29 @@ class SurveyTest < MiniTest::Unit::TestCase
     # Act
     survey.username = ''
     # Assert
-    assert_equal survey.valid?, false 
+    assert_equal survey.valid?, false
   end
 
   def test_survey_has_a_career
     # Arrange
-    career = Career.create(name:'Agrimensor')
-    survey1 = Survey.create(username:'Nico Ortiz', career_id: career.id)
-    survey2 = Survey.create(username:'Joaco Moran', career_id: career.id)
+    career = Career.create(name: 'Agrimensor')
+    survey1 = Survey.create(username: 'Nico Ortiz', career_id: career.id)
+    survey2 = Survey.create(username: 'Joaco Moran', career_id: career.id)
     # Act
-    
+
     # Assert
-    assert_equal(survey1.career.id,survey2.career.id)
+    assert_equal(survey1.career.id, survey2.career.id)
   end
 
   def test_survey_has_diff_career
     # Arrange
-    career1 = Career.create(name:'Agrimensor')
-    career2 = Career.create(name:'Peon de estancia')
-    survey1 = Survey.create(username:'Nico Ortiz', career_id: career1.id)
-    survey2 = Survey.create(username:'Joaco Moran', career_id: career2.id)
+    career1 = Career.create(name: 'Agrimensor')
+    career2 = Career.create(name: 'Peon de estancia')
+    survey1 = Survey.create(username: 'Nico Ortiz', career_id: career1.id)
+    survey2 = Survey.create(username: 'Joaco Moran', career_id: career2.id)
     # Act
-    
+
     # Assert
-    assert_equal(false,survey1.career.id==survey2.career.id)
+    assert_equal(false, survey1.career.id == survey2.career.id)
   end
-end
\ No newline at end of file
+end
diff --git a/tests/test_helper.rb b/tests/test_helper.rb
index ab50d40..da57a47 100644
--- a/tests/test_helper.rb
+++ b/tests/test_helper.rb
@@ -1,3 +1,5 @@
+# frozen_string_literal: true
+
 ENV['RACK_ENV'] = 'test'
 require 'minitest/autorun'
 require 'minitest/color'
@@ -5,14 +7,17 @@ require 'rack/test'
 require 'sequel'
 require 'sinatra'
 DB = Sequel.connect(
-   adapter: 'postgres',
-   database: 'vocational-test_test',
-   host: 'testdb',
-   user: 'unicorn',
-   password: 'magic')
-class Minitest::HooksSpec
-  def around
-    DB.transaction(:rollback=>:always, :auto_savepoint=>true){super}
+  adapter: 'postgres',
+  database: 'vocational-test_test',
+  host: 'testdb',
+  user: 'unicorn',
+  password: 'magic'
+)
+module Minitest
+  class HooksSpec # rubocop:todo Style/Documentation
+    def around
+      DB.transaction(rollback: :always, auto_savepoint: true){super}
+    end
   end
 end
-require File.expand_path './app.rb'
\ No newline at end of file
+require File.expand_path './app.rb'
